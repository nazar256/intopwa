// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/nazar256/intopwa/internal/domain"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// IconsFetcher is an autogenerated mock type for the iconsFetcher type
type IconsFetcher struct {
	mock.Mock
}

type IconsFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *IconsFetcher) EXPECT() *IconsFetcher_Expecter {
	return &IconsFetcher_Expecter{mock: &_m.Mock}
}

// CacheIcons provides a mock function with given fields: ctx, pageURL, iconURLs
func (_m *IconsFetcher) CacheIcons(ctx context.Context, pageURL *url.URL, iconURLs []*url.URL) error {
	ret := _m.Called(ctx, pageURL, iconURLs)

	if len(ret) == 0 {
		panic("no return value specified for CacheIcons")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL, []*url.URL) error); ok {
		r0 = rf(ctx, pageURL, iconURLs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IconsFetcher_CacheIcons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheIcons'
type IconsFetcher_CacheIcons_Call struct {
	*mock.Call
}

// CacheIcons is a helper method to define mock.On call
//   - ctx context.Context
//   - pageURL *url.URL
//   - iconURLs []*url.URL
func (_e *IconsFetcher_Expecter) CacheIcons(ctx interface{}, pageURL interface{}, iconURLs interface{}) *IconsFetcher_CacheIcons_Call {
	return &IconsFetcher_CacheIcons_Call{Call: _e.mock.On("CacheIcons", ctx, pageURL, iconURLs)}
}

func (_c *IconsFetcher_CacheIcons_Call) Run(run func(ctx context.Context, pageURL *url.URL, iconURLs []*url.URL)) *IconsFetcher_CacheIcons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*url.URL), args[2].([]*url.URL))
	})
	return _c
}

func (_c *IconsFetcher_CacheIcons_Call) Return(_a0 error) *IconsFetcher_CacheIcons_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IconsFetcher_CacheIcons_Call) RunAndReturn(run func(context.Context, *url.URL, []*url.URL) error) *IconsFetcher_CacheIcons_Call {
	_c.Call.Return(run)
	return _c
}

// FetchIcons provides a mock function with given fields: ctx, u
func (_m *IconsFetcher) FetchIcons(ctx context.Context, u *url.URL) []domain.Icon {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for FetchIcons")
	}

	var r0 []domain.Icon
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL) []domain.Icon); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Icon)
		}
	}

	return r0
}

// IconsFetcher_FetchIcons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchIcons'
type IconsFetcher_FetchIcons_Call struct {
	*mock.Call
}

// FetchIcons is a helper method to define mock.On call
//   - ctx context.Context
//   - u *url.URL
func (_e *IconsFetcher_Expecter) FetchIcons(ctx interface{}, u interface{}) *IconsFetcher_FetchIcons_Call {
	return &IconsFetcher_FetchIcons_Call{Call: _e.mock.On("FetchIcons", ctx, u)}
}

func (_c *IconsFetcher_FetchIcons_Call) Run(run func(ctx context.Context, u *url.URL)) *IconsFetcher_FetchIcons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*url.URL))
	})
	return _c
}

func (_c *IconsFetcher_FetchIcons_Call) Return(_a0 []domain.Icon) *IconsFetcher_FetchIcons_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IconsFetcher_FetchIcons_Call) RunAndReturn(run func(context.Context, *url.URL) []domain.Icon) *IconsFetcher_FetchIcons_Call {
	_c.Call.Return(run)
	return _c
}

// One provides a mock function with given fields: ctx, iconURL
func (_m *IconsFetcher) One(ctx context.Context, iconURL *url.URL) (domain.Icon, error) {
	ret := _m.Called(ctx, iconURL)

	if len(ret) == 0 {
		panic("no return value specified for One")
	}

	var r0 domain.Icon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL) (domain.Icon, error)); ok {
		return rf(ctx, iconURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *url.URL) domain.Icon); ok {
		r0 = rf(ctx, iconURL)
	} else {
		r0 = ret.Get(0).(domain.Icon)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *url.URL) error); ok {
		r1 = rf(ctx, iconURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IconsFetcher_One_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'One'
type IconsFetcher_One_Call struct {
	*mock.Call
}

// One is a helper method to define mock.On call
//   - ctx context.Context
//   - iconURL *url.URL
func (_e *IconsFetcher_Expecter) One(ctx interface{}, iconURL interface{}) *IconsFetcher_One_Call {
	return &IconsFetcher_One_Call{Call: _e.mock.On("One", ctx, iconURL)}
}

func (_c *IconsFetcher_One_Call) Run(run func(ctx context.Context, iconURL *url.URL)) *IconsFetcher_One_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*url.URL))
	})
	return _c
}

func (_c *IconsFetcher_One_Call) Return(_a0 domain.Icon, _a1 error) *IconsFetcher_One_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IconsFetcher_One_Call) RunAndReturn(run func(context.Context, *url.URL) (domain.Icon, error)) *IconsFetcher_One_Call {
	_c.Call.Return(run)
	return _c
}

// NewIconsFetcher creates a new instance of IconsFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIconsFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *IconsFetcher {
	mock := &IconsFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
